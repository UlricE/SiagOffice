
Installing Siag
===============

The programs and libraries are included in a single archive.

1. Untar the archive:

	gzip -cd siag-3.5.0.tar.gz | tar xfv -

2. Enter the top-level directory:

	cd siag-3.5.0

3. Compile and install everything:

	./configure
	make
	make install

4. Linux users:

	/sbin/ldconfig

Done. Take it for a test drive. Try some of the examples.

The names of the programs are:
 - pw: a word processor
 - siag: a spreadsheet
 - egon: an tool to create animations or presentations
 - gvu: a postscript previewer
 - xfiler: a file manager
 - xedplus: a text editor

As an alternative to "make install", you can use "make install-strip"
which saves a little disk space.


Dependencies
------------

Previous versions of Siag Office included Ed Falk's widget library XawM.
It is now distributed separately and available from the homepage of
Siag Office, at http://siag.nu/pub/widgets/.

Available at the same place is the Mowitz library, which is mandatory
for Siag Office 3.5.0 and later.

You also need the Xpm library. Support for additional image formats
can be added by installing the Netpbm package.


The executables are by default installed in /usr/local/bin. It is
important that this directory is in your PATH, for example by adding
this line to the file /etc/profile:

PATH="/usr/local/bin:$PATH"; export PATH


Optional libraries
------------------

To get support for optional features such as the ndbm database library
or additional programming languages, you must give the corresponding
options to configure. Type "./configure --help" for details.
Here are the relevant lines:

  --with-ndbm=libname     enable (named) ndbm library default: gdbm
  --with-tcl=libname      enable (named) tcl library default: tcl
  --with-xawm             choose XawM compatible library (default XawM)
  --with-guile            enable guile commands and expressions
  --with-python           enable python commands and expressions
  --with-ruby             enable ruby commands and expressions
  --with-stocks           enable libstocks (stock quotes over the Internet)
  --with-gmp              enable Gnu arbitrary precision arithmetic
  --with-sdb              enable database queries through LibSDB
  --with-ccmath           enable the CCMATH mathematics library
  --with-t1lib            enable t1lib



Python installs itself in nonstandard locations and requires the
following kludge when configuring:

CFLAGS=-I/usr/local/include/python2.2 \
LDFLAGS=-L/usr/local/lib/python2.2/config \
./configure --with-python


Ruby is pretty much the same. Here's what I type:

CFLAGS=-I/home/ulric/ruby-1.6.6 \
LDFLAGS=-L/home/ulric/ruby-1.6.6 \
./configure --with-ruby

But it gets worse. Ruby calls one of its header files regex.h, which
collides with the Posix header of the same name. This prevents SIOD
from compiling, which breaks the build. The only solution I've managed
to come up with is to rename Ruby's regex.h to something else,
for example rb_regex.h.


Database access to a number of database management systems is available
out of the box, using the proxy in libsdb. This requires nothing extra
during configuration and no extra libraries.

Non-proxied database access requires linking with libsdb.
First install libsdb, available from http://siag.nu/libsdb/.
Then run configure:

./configure --with-sdb


It is possible to replace the XawM widget library with another, as
long as it is source compatible. This includes at least Xaw, Xaw3d,
Xaw95, XawXpm and neXtaw. To change the widget set to neXtaw:

./configure --with-xawm=neXtaw

Doing this will require some resource tweaking as well. Stick with
XawM unless you know what you are doing.


It is possible to get stock quotes in the spreadsheet by linking with
Eric Laeuffer's libstocks library. Some time ago, non-US stocks
stopped working and all quotes were 0. After playing around for a while,
I figured out that Yahoo have consolidated their servers so that
finance.yahoo.com should be used for everything.

Here is the (rather silly) fix I added to stocks.c from libstocks 0.5.0:

8<---
const char yahoo_us_stocks_server[]="finance.yahoo.com";
#if 0
const char yahoo_eu_stocks_server[]="fr.finance.yahoo.com";
#else
const char yahoo_eu_stocks_server[]="finance.yahoo.com";
#endif

;-)

With the fix, some of the symbols in the test string at the end of the
README still don't work. Without the fix, none of the symbols work.


==================================================================

That concludes the installation instructions for Siag Office 3.5.0.
Here are some hints that were useful for older versions; they are
included for reference only.

==================================================================

Skipping the "make install" step or trying to move things around
manually is a Bad Idea. It may cause clicking on any menu to
make the application exit, explaining that a widget has zero
width and/or height.

[Detailed explanation: the applications depend on libraries of
 routines written in Scheme. For example, Siag gets much of its
 functionality from a file called siag.scm, which in turn loads
 menu.scm, which sets up all the menus. No siag.scm means no
 menu.scm, which means empty menus, i.e. "zero width/height".
 More details can be found in the manpages.]

--------

If you have previously installed a very old version of Siag, there is
a chance that bogus app-default files still exist and will cause all
kinds of problems with colours, geometry et al. The solution is to
find the file and delete it. Something like:

	find / -name Siag -ok rm {} \;

You can save time if you know where your system keeps app-default
files. Good places to look include:

	/usr/openwin/lib/app-defaults
	/usr/X11R6/lib/app-defaults
	/usr/local/X11/lib/app-defaults

--------------------

[Contributed instructions for building on Irix. I have no way to test
 this, but hope it will make porting easier. /Ulric]

Dear Ulric,

may I first congratulate you on producing the excellent Siag package. It
does everything (virtually) that I need on my Silicon Graphics
workstation. I'm sending this mail to let you know how I got it to compile
(not difficult).

The main change was to the filesel.c code because IRIX doesn't have
fnmatch(). I used gmatch (man page attached), the diffs are:

28c28
< #include <fnmatch.h>
---
> #include <libgen.h>
100c100
<                               !fnmatch(pattern, dire->d_name, 0)) {
---
>                               gmatch(dire->d_name, pattern)) {

This also requires an extra link library (-lgen) which obviously affects
several Makefiles.

As a horrible fix to common.c I added #defines for LIBEXECDIR, DATADIR,
DOCDIR, VERSION_NO but I'm sure there's a much better way of fixing that
problem. Finally IRIX likes to run "ar -ts" on all the newly created
libraries (libcommon.a etc...) which I also just added to the relevent
Makefiles.

I use IRIX 5.3 and the SG "IRIX Development Option" (IDO). I got all the
other bits and pieces (Athena 3D, GV etc...) from IRIX freeware CD's and
regex from rx-1.5 (downloaded from somewhere-or-other).

The new config routine caused no problems - I dont have autoconf etc... So
once again thankyou for making this software available. BTW if anyone
wants IRIX binaries, I'd be happy to make them available.

regards
 
Harold Toms
ULIRS NMR Service
Queen Mary and Westfield College
London University
URL = http://iodine.chem.qmw.ac.uk/

That which we are, we are:
One equal temper of heroic hearts,
Made weak by time and fate, but strong in will
To strive, to seek, to find, and not to yield.

"Ulysses", Alfred, Lord Tennyson.


==================================================================


Below are the generic installation instructions
for autoconf. You probably won't need them.


==================================================================


Basic Installation
==================

   These are generic installation instructions.

   The `configure' shell script attempts to guess correct values for
various system-dependent variables used during compilation.  It uses
those values to create a `Makefile' in each directory of the package.
It may also create one or more `.h' files containing system-dependent
definitions.  Finally, it creates a shell script `config.status' that
you can run in the future to recreate the current configuration, a file
`config.cache' that saves the results of its tests to speed up
reconfiguring, and a file `config.log' containing compiler output
(useful mainly for debugging `configure').

   If you need to do unusual things to compile the package, please try
to figure out how `configure' could check whether to do them, and mail
diffs or instructions to the address given in the `README' so they can
be considered for the next release.  If at some point `config.cache'
contains results you don't want to keep, you may remove or edit it.

   The file `configure.in' is used to create `configure' by a program
called `autoconf'.  You only need `configure.in' if you want to change
it or regenerate `configure' using a newer version of `autoconf'.

The simplest way to compile this package is:

  1. `cd' to the directory containing the package's source code and type
     `./configure' to configure the package for your system.  If you're
     using `csh' on an old version of System V, you might need to type
     `sh ./configure' instead to prevent `csh' from trying to execute
     `configure' itself.

     Running `configure' takes awhile.  While running, it prints some
     messages telling which features it is checking for.

  2. Type `make' to compile the package.

  3. Optionally, type `make check' to run any self-tests that come with
     the package.

  4. Type `make install' to install the programs and any data files and
     documentation.

  5. You can remove the program binaries and object files from the
     source code directory by typing `make clean'.  To also remove the
     files that `configure' created (so you can compile the package for
     a different kind of computer), type `make distclean'.  There is
     also a `make maintainer-clean' target, but that is intended mainly
     for the package's developers.  If you use it, you may have to get
     all sorts of other programs in order to regenerate files that came
     with the distribution.

Compilers and Options
=====================

   Some systems require unusual options for compilation or linking that
the `configure' script does not know about.  You can give `configure'
initial values for variables by setting them in the environment.  Using
a Bourne-compatible shell, you can do that on the command line like
this:
     CC=c89 CFLAGS=-O2 LIBS=-lposix ./configure

Or on systems that have the `env' program, you can do it like this:
     env CPPFLAGS=-I/usr/local/include LDFLAGS=-s ./configure

Compiling For Multiple Architectures
====================================

   You can compile the package for more than one kind of computer at the
same time, by placing the object files for each architecture in their
own directory.  To do this, you must use a version of `make' that
supports the `VPATH' variable, such as GNU `make'.  `cd' to the
directory where you want the object files and executables to go and run
the `configure' script.  `configure' automatically checks for the
source code in the directory that `configure' is in and in `..'.

   If you have to use a `make' that does not supports the `VPATH'
variable, you have to compile the package for one architecture at a time
in the source code directory.  After you have installed the package for
one architecture, use `make distclean' before reconfiguring for another
architecture.

Installation Names
==================

   By default, `make install' will install the package's files in
`/usr/local/bin', `/usr/local/man', etc.  You can specify an
installation prefix other than `/usr/local' by giving `configure' the
option `--prefix=PATH'.

   You can specify separate installation prefixes for
architecture-specific files and architecture-independent files.  If you
give `configure' the option `--exec-prefix=PATH', the package will use
PATH as the prefix for installing programs and libraries.
Documentation and other data files will still use the regular prefix.

   In addition, if you use an unusual directory layout you can give
options like `--bindir=PATH' to specify different values for particular
kinds of files.  Run `configure --help' for a list of the directories
you can set and what kinds of files go in them.

   If the package supports it, you can cause programs to be installed
with an extra prefix or suffix on their names by giving `configure' the
option `--program-prefix=PREFIX' or `--program-suffix=SUFFIX'.

Optional Features
=================

   Some packages pay attention to `--enable-FEATURE' options to
`configure', where FEATURE indicates an optional part of the package.
They may also pay attention to `--with-PACKAGE' options, where PACKAGE
is something like `gnu-as' or `x' (for the X Window System).  The
`README' should mention any `--enable-' and `--with-' options that the
package recognizes.

   For packages that use the X Window System, `configure' can usually
find the X include and library files automatically, but if it doesn't,
you can use the `configure' options `--x-includes=DIR' and
`--x-libraries=DIR' to specify their locations.

Specifying the System Type
==========================

   There may be some features `configure' can not figure out
automatically, but needs to determine by the type of host the package
will run on.  Usually `configure' can figure that out, but if it prints
a message saying it can not guess the host type, give it the
`--host=TYPE' option.  TYPE can either be a short name for the system
type, such as `sun4', or a canonical name with three fields:
     CPU-COMPANY-SYSTEM

See the file `config.sub' for the possible values of each field.  If
`config.sub' isn't included in this package, then this package doesn't
need to know the host type.

   If you are building compiler tools for cross-compiling, you can also
use the `--target=TYPE' option to select the type of system they will
produce code for and the `--build=TYPE' option to select the type of
system on which you are compiling the package.

Sharing Defaults
================

   If you want to set default values for `configure' scripts to share,
you can create a site shell script called `config.site' that gives
default values for variables like `CC', `cache_file', and `prefix'.
`configure' looks for `PREFIX/share/config.site' if it exists, then
`PREFIX/etc/config.site' if it exists.  Or, you can set the
`CONFIG_SITE' environment variable to the location of the site script.
A warning: not all `configure' scripts look for a site script.

Operation Controls
==================

   `configure' recognizes the following options to control how it
operates.

`--cache-file=FILE'
     Use and save the results of the tests in FILE instead of
     `./config.cache'.  Set FILE to `/dev/null' to disable caching, for
     debugging `configure'.

`--help'
     Print a summary of the options to `configure', and exit.

`--quiet'
`--silent'
`-q'
     Do not print messages saying which checks are being made.  To
     suppress all normal output, redirect it to `/dev/null' (any error
     messages will still be shown).

`--srcdir=DIR'
     Look for the package's source code in directory DIR.  Usually
     `configure' can determine that directory automatically.

`--version'
     Print the version of Autoconf used to generate the `configure'
     script, and exit.

`configure' also accepts some other, not widely useful, options.

